syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "Rsbc.Dmf.CaseManagement.Service";

package CaseManagement;

service CaseManager {

  rpc CreateLegacyCaseComment (LegacyComment) returns (CreateStatusReply);

  rpc CreateLegacyCaseDocument (LegacyDocument) returns (CreateStatusReply);

  rpc GetCaseComments (CaseIdRequest) returns (GetCommentsReply);

  rpc GetCaseDocuments (CaseIdRequest) returns (GetDocumentsReply);

  rpc GetDrivers (EmptyRequest) returns (GetDriversReply);

  rpc GetDriverComments (DriverLicenseRequest) returns (GetCommentsReply);

  rpc GetDriverDocuments (DriverLicenseRequest) returns (GetDocumentsReply);

  // process a line item from the legacy candidate list
  rpc ProcessLegacyCandidate (LegacyCandidateRequest) returns (LegacyCandidateReply);

  // Seach cases. Can also return a specific case.
  rpc Search (SearchRequest) returns (SearchReply);

  // Get a token given a secret.
  rpc GetToken (TokenRequest) returns (TokenReply);

  // Update a Case
  rpc UpdateCase(UpdateCaseRequest) returns (UpdateCaseReply);

  rpc SetCasePractitionerClinic(SetCasePractitionerClinicRequest) returns (SetCasePractitionerClinicReply);

  // Get all the flags
  rpc GetAllFlags(EmptyRequest) returns (GetAllFlagsReply);

  rpc GetUnsentMedicalUpdates(EmptyRequest) returns (SearchReply);

  rpc MarkMedicalUpdatesSent(IdListRequest) returns (ResultStatusReply);
}

message DriverLicenseRequest {
	string driverLicenseNumber= 1;
}

message CaseIdRequest {
	string caseId= 1;
}

message GetCommentsReply {
	repeated LegacyComment items = 1;
	ResultStatus resultStatus = 2;
	string errorDetail = 3;
}

message GetDocumentsReply {
	repeated LegacyDocument items = 1;
	ResultStatus resultStatus = 2;
	string errorDetail = 3;
}

message LegacyComment {
	int64 SequenceNumber = 1;
	string CommentTypeCode = 2;
	string CommentText = 3;
	string UserId = 4;
	string CaseId = 5;
	string CommentId = 6;
	google.protobuf.Timestamp CommentDate = 7;
	Driver Driver = 8;
}

message LegacyDocument {
	int64 SequenceNumber = 1;
	string DocumentTypeCode = 2;
	string DocumentUrl = 3;
	string UserId = 4;
	string CaseId = 5;
	string DocumentId = 6;
	google.protobuf.Timestamp FaxReceivedDate = 7;
	google.protobuf.Timestamp ImportDate = 8;
	string ImportId = 9;
	Driver Driver = 10;
	string BatchId = 11;
	string OriginatingNumber = 12;
	int64 DocumentPages = 13;
	string ValidationMethod = 14;
	string ValidationPrevious = 15;
}


message CreateStatusReply {	
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
	string id = 3;
}

message SearchRequest {
  string caseId = 1;
  string title = 2;
  string comment = 3;
  string clinicId = 4;
  string driverLicenseNumber = 5;
  repeated string statuses = 6;
}

message SearchReply {
  repeated DmerCase items = 1;
  ResultStatus resultStatus = 2;
  string errorDetail = 3;
}

message EmptyRequest {	
}

message GetAllFlagsReply {
	repeated FlagItem Flags = 1;
}

message DmerCase {
	string caseId = 1;
	string createdBy = 2;
	google.protobuf.Timestamp createdOn = 3;
	string modifiedBy = 4;
	google.protobuf.Timestamp modifiedOn = 5;
	bool isCommercial = 6;
	string title = 7;
	Driver driver = 10;
	Provider provider = 11;	
	string status = 12;
	string dmerType = 13;
	string clinicName = 14;
	repeated FlagItem Flags = 30;
	repeated DecisionItem Decisions = 35;
}

message Driver {
	string id = 1;
    string name = 2;
	string givenName = 3;
	string surname = 4;
	string middlename = 5;
	double weight = 6;
	string sex = 7;
	google.protobuf.Timestamp birthDate = 8;
	double height = 9;
	string seck = 10;
    Address address = 11;
	string driverLicenseNumber = 12;
}

message Provider {
	string id = 1;	
	string name = 2;
	string givenName = 3;
	string surname = 4;
	string providerDisplayId = 5;
	string providerDisplayIdType = 6;
	string providerRole = 7;
	string providerSpecialty = 8;
	string phoneUseType = 9;
	string phoneNumber = 10;
	string phoneExtension = 11;
	string faxUseType = 12;
	string faxNumber = 13;
	Address address = 14;	
}

message Address {
	string line1 = 1;
	string line2 = 2;
	string city = 3;
	string postal = 4;
}

enum ResultStatus {
	Fail = 0;
	Success = 1;
}

message TokenRequest {
	string secret = 1;
}

message TokenReply {
	ResultStatus resultStatus = 1;
	string token = 2;
	string errorDetail = 3;
}

message UpdateCaseRequest{
	string caseId = 1;
	bool isCleanPass = 2;
	repeated FlagItem flags = 3;
	string pdfFileKey = 4;
	int64 pdfFileSize = 5;
	string dataFileKey = 6;
	int64 dataFileSize = 7;
}

message UpdateCaseReply {	
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
}

message SetCasePractitionerClinicRequest{
	string caseId = 1;
	string PractitionerId = 2;
	string ClinicId = 3;
}

message SetCasePractitionerClinicReply{
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
}


message LegacyCandidateRequest{
	string licenseNumber = 1;
    string clientNumber = 2;
	string surname = 3;
}

message LegacyCandidateReply{
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
}



message FlagItem {
	string identifier = 1;
	string question = 2;
	bool result = 3;
	enum FlagTypeOptions {
		Unknown = 0;
		Submittal = 1;
		Review = 2;
		FollowUp = 3;
		Message = 4;
	}
	FlagTypeOptions flagType = 4;
}

message DecisionItem {
	string identifier = 1;
	google.protobuf.Timestamp createdOn = 2;
	enum DecisionOutcomeOptions {
		Unknown = 0;
		FitToDrive = 1;
        NonComply = 2;
        UnfitToDrive = 3;
	}
	DecisionOutcomeOptions outcome = 3;
}

service UserManager {
  rpc Search (UsersSearchRequest) returns (UsersSearchReply);
  rpc Login (UserLoginRequest) returns (UserLoginReply);
  rpc SetEmail(UserSetEmailRequest) returns (ResultStatusReply);
}

message UserSetEmailRequest {
	string userId = 1;
	string email = 2;
}

message UsersSearchRequest {
	string userId = 1;
	string externalSystem = 2;
	string externalSystemUserId = 3;
	UserType userType = 4;
}

message UsersSearchReply {
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
	repeated User user = 10;
}

message GetDriversReply {
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
	repeated Driver items = 10;
}

message UserLoginRequest {
	string externalSystemUserId = 1;
	string externalSystem = 2;
	UserType userType = 3; 
	string firstName = 10;
	string lastName = 11;
	repeated UserProfile userProfiles = 20;
}

message UserLoginReply {
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
	string userId = 10;
	string userEmail = 11;
}

message User {
	string id = 1;
	string externalSystemUserId = 2;
	string externalSystem = 3;
	string firstName = 10;
	string lastName = 11;
	repeated string roles = 12;
	repeated UserProfile linkedProfiles = 20;
}

message UserProfile {
	oneof profile {
		MedicalPractitionerProfile medicalPractitioner = 1;
		DriverProfile driver = 2;
	}
}

message MedicalPractitionerProfile {
	string id = 1;
	string role = 2;
	Clinic clinic = 3;
}

message Clinic {
	string id = 1;
	string name = 2;
}

message DriverProfile {
	string id = 1;

}

enum UserType {
	MedicalPractitionerUserType = 0;
	DriverUserType = 1;
}

message IdListRequest {
	repeated string idList = 1;
}

message ResultStatusReply {	
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
}

